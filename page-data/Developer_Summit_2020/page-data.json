{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/Developer_Summit_2020/","webpackCompilationHash":"b3bc7b221ba8b2f0ccc3","result":{"data":{"site":{"siteMetadata":{"title":"Takumi Ogawa - @ogady","user":{"name":"Takumi Ogawa","github":"ogady","qiita":"ogady","twitter":"_ogady_","facebook":"takumi.ogawa.37266","linkedin":"takumi-ogawa-869046195"}}},"markdownRemark":{"html":"<h2><a href=\"https://speakerdeck.com/broadleaf/our60dayswar-migrationfromon-premisetocloud\">[13-D-2] ぼくらの六十日間戦争 ～ｵﾝﾌﾟﾚからｸﾗｳﾄﾞへの移行～</a></h2>\n<h3>ブロードリーフ会社概要</h3>\n<ul>\n<li>自動車アフターマーケット市場で様々なサービスを提供している</li>\n<li>\n<p>Broad Leaf Cloud Platform</p>\n<ul>\n<li>自動車整備・鈑金・車両販売</li>\n<li>自動車部品商、リサイクル業　 etc</li>\n<li>新サービスは GCP 上にクラウドネイティブで構築している。k8s 使用</li>\n<li>旧サービスはオンプレミスで VM、RDB、Windows で運用していた ← 今回はこれをクラウド移行した話</li>\n</ul>\n</li>\n</ul>\n<h3>なぜクラウド移行したか</h3>\n<ul>\n<li>HW 管理、ミドルウェアの保守からの解放</li>\n<li>\n<p>IaC によるプロビジョニング自動化、作業属人化の排除</p>\n<ul>\n<li>手順書のメンテナンスができていない、そもそも手順書がないなどの状況だった。</li>\n</ul>\n</li>\n<li>バックアップ、リストア、クラスタ維持の運用コスト削減</li>\n<li>拡張性向上、TCO（Total Cost of Ownership）の削減</li>\n<li>手のかからない状態にしたかった（新規サービスに）体力を割きたかった。</li>\n</ul>\n<h3>移行後のインフラ</h3>\n<ul>\n<li>基盤は AWS（EC2 ベース）</li>\n<li>IaC は Terraform</li>\n<li>AMI 作成は Packer &#x26; Ansible</li>\n<li>BtoB サービスでパフォーマンス予測はできるので、自動復旧（オートスケーリング）を目的とする</li>\n<li>DB は RDS を使用</li>\n</ul>\n<h3>どうやったか</h3>\n<ul>\n<li>作業は夜間（ユーザー影響を防ぐ）</li>\n<li>\n<p>DB のバックアップサイズ、S3 の転送時間を加味すると 40 時間くらいかかって間に合わない</p>\n<ul>\n<li>大きな DB は Database Mirroring を使用（DMS は使えなかった）</li>\n<li>小さな DB はフル BU でリストア</li>\n<li>ファイルは毎日 FastCopy（無料で一番早い）で同期</li>\n<li>AWS とオンプレは VPN 接続を行う</li>\n</ul>\n</li>\n</ul>\n<h3>移行前の検証</h3>\n<ul>\n<li>AP の動作検証</li>\n<li>\n<p>負荷検証</p>\n<ul>\n<li>ここは専用のツールを自作し、複数スレッドで高負荷をかける</li>\n</ul>\n</li>\n<li>DB のフェールオーバの動作検証（DB が FO したとき AP サーバーで接続をキャッシュしないようにする。）</li>\n</ul>\n<h3>デプロイ</h3>\n<ul>\n<li>デプロイパイプラインを作成する。開発環境はデプロイ後に EC2 がオートスケールし、入れ替えを行う</li>\n<li>移行は連休を利用して行った。</li>\n</ul>\n<h3>移行後に問題発生</h3>\n<h4>RDS の CPU 使用率が爆上がり</h4>\n<ul>\n<li>\n<p>特定のクエリで CPU 使用率が上がる</p>\n<ul>\n<li>お金でねじ伏せる →RDS インスタンスの垂直拡張 ← これじゃダメだった。6 日後にまた爆あがり</li>\n</ul>\n</li>\n</ul>\n<h5>原因は</h5>\n<ul>\n<li>\n<p>CPU 使用率が高いクエリがあり、実行プランがおかしくなっている。</p>\n<ul>\n<li>普通は Hint 句をつけるが、古の芸術的クエリを直すのはリスクが高い</li>\n<li>クエリストア（SQL Server）を使用して、実行プランを元に戻した。</li>\n</ul>\n</li>\n<li>他のクエリもおかしくなっていた</li>\n</ul>\n<h5>根本原因</h5>\n<ul>\n<li>統計情報の更新をしていなかった</li>\n<li>インデックスが断片化していた</li>\n</ul>\n<h5>解決</h5>\n<ul>\n<li>\n<p>実行プランの固定化</p>\n<ul>\n<li>検索の文字数で実行プラン変わってしまうクエリがあったので、愚直に一文字づつ固定化した</li>\n</ul>\n</li>\n<li>統計情報更新</li>\n<li>インデックス整備</li>\n</ul>\n<h3>まとめ</h3>\n<ul>\n<li>\n<p>DB は移行前にきれいにしておく</p>\n<ul>\n<li>インデックスのリビルドなどは定期的にやっておく</li>\n</ul>\n</li>\n<li>全パターンのクエリをテストする必要がある</li>\n<li>移行時に統計情報更新を忘れずに全部やる</li>\n<li>\n<p>1 ヶ月分の Trace を再生する</p>\n<ul>\n<li>オンプレの本番環境に再生可能な Trace を仕込み</li>\n<li>テスト用 RDS にフルバックアップを展開し Trace を再生</li>\n<li>擬似的に 1 ヶ月分のパフォーマンスを再現テストできる</li>\n</ul>\n</li>\n</ul>\n<h3>困難を乗り越えて成長するには</h3>\n<ul>\n<li><strong>成長機会は平等ではない</strong></li>\n<li><strong>大事なのは積極性</strong></li>\n<li><strong>一歩踏み出す勇気</strong></li>\n</ul>\n<h2><a href=\"https://www.slideshare.net/KonYuichi/note-227802322/KonYuichi/note-227802322\">[13-C-3] note の決して止まらないカイゼンを支える、エンジニアリングへの挑戦</a></h2>\n<h3>note のグロースモデル</h3>\n<ul>\n<li>\n<p><strong>単一の KPI に絞らない</strong></p>\n<p>例：投稿数だけを追う（クソ記事量産）、売り上げだけを追う（有料記事のみ量産）</p>\n</li>\n<li>\n<p>要はバランスを大事にし、<strong>勝手に伸びてくサービス</strong>を目指す</p>\n<ul>\n<li>サービスモデルをアクションでブロック分けし、悪いところを改善していく</li>\n</ul>\n</li>\n</ul>\n<h3>note のチーム</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">リリース頻度高\n- 基盤チーム：グロースモデル全体を下支えする。\n  - SEO対策、データ基盤、スパム対策 etc...\n- 機能開発チーム：サービスのポテンシャルを上げる。短期間（3ヶ月）でメイン機能をリリースする\n  - サークル機能、漫画ビューワ、タイムライン改修\n- カイゼンチーム：1日〜2週間で、グロースモデルの弱いところをクイックに開発していく\nリリース頻度低</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>note のデータ</h3>\n<p>定性的にしか見れていなかったので、グロースモデルの状態が把握しづらくなっていた。</p>\n<ul>\n<li>note はサービスが把握しやすい。</li>\n<li>\n<p>定量的にどこが弱いのかを把握する必要があった。有効な施策を再現性高くやってきたかった。</p>\n<ul>\n<li>定量的に見るために、定義を決める必要がある（創作継続、離脱 etc...）</li>\n<li>グロースモデルをドリルダウンし、よりモデルを定義的に</li>\n</ul>\n</li>\n</ul>\n<h3>何をやっているのか</h3>\n<h4>データ分析基盤</h4>\n<ul>\n<li>データを一元管理する AWS で構築、意思決定陣が見やすいインターフェースを提供する</li>\n<li>データを元に、定義付け → 仮説検証 → 調査 を回す。</li>\n</ul>\n<p><strong>サービスの性質により、指標は異なる</strong></p>\n<h3>これから何をしていくのか</h3>\n<ul>\n<li>\n<p>パフォーマンス課題の解消</p>\n<ul>\n<li>Nuxt.js、Rails、AWS それぞれにパフォーマンス課題</li>\n</ul>\n</li>\n<li>\n<p>レコメンド機能を向上させる</p>\n<p>note はなかなかコンテンツの種類が多く、レコメンドが難しい</p>\n<ul>\n<li>適切なチャネルは？</li>\n<li>セグメントの定義は？</li>\n<li>使用する ML の技術は？</li>\n<li>UI/UX の改善ポイントもある</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://speakerdeck.com/twada/quality-and-speed\">[13-B-4]質とスピード</a></h2>\n<h3>そもそも質とは</h3>\n<ul>\n<li>\n<p>狩野モデル</p>\n<ul>\n<li>可能品質と当たり前品質</li>\n</ul>\n</li>\n<li>内部品質と外部品質 ≒ 非機能要件と機能要件がある</li>\n</ul>\n<h3>内部品質を犠牲にしてスピードをとる</h3>\n<ul>\n<li>よく犠牲にされるのは、保守性</li>\n<li>品質を犠牲にスピードをとるとき、品質 → 内部品質 → 保守性 → テスタビリティ、変更容易性、理解容易性を犠牲にされがち。<strong>これでは現場が疲弊する</strong></li>\n</ul>\n<h3>ではスピードを遅くすれば保守性は上がるのか</h3>\n<ul>\n<li>技術力の低い人が時間をかけてコードを書いても、いいコードが出てくるわけではない</li>\n<li>たしかに、「時間がないから、将来困るけど汚いコード書こう」って意識的にやることはない</li>\n<li>\n<p><strong>保守性とスピードは真のトレードオフではない</strong></p>\n<ul>\n<li>「事実は、短期的にも長期的でも、崩壊したコードを書くほうがクリーンなコードを書くよりも常に遅い」</li>\n</ul>\n</li>\n<li>品質(保守性)→ スピードの関係は、「保守性が高い<em>にも関わらず</em>スピードがはやい」ではなく「<em>だからこそ</em>」</li>\n<li>スピード → 品質(保守性)の関係では、現在の市場において仮説検証のプロセスの速さで良いサービスを生み出すこと、が求められる中で、「スピードが遅ければ品質を保てる」は真ではないことは明らか</li>\n</ul>\n<h3>保守性とスピードの損益分岐点は？</h3>\n<ul>\n<li><strong>テスト自動化の損益分岐点は約 4 回</strong>（手動テストと自動テストの損益分岐点）</li>\n<li>\n<p><strong>内部品質への投資の損益分岐点は 1 ヶ月以内に現れる。</strong></p>\n<ul>\n<li>ここで重要なのは、1 ヶ月であれば、その損益を受けるのは自分たちであること</li>\n</ul>\n</li>\n</ul>\n<h3>結論</h3>\n<ul>\n<li>「質」VS「スピード」の関係は局所的なものでしかない、<strong>大局的には、質向上とスピード向上はサイクルの関係にある</strong></li>\n<li>\n<p>ではどうやって、個人の質を上げるのか</p>\n<ul>\n<li>一番大事、かつ一番厄介なスキルは、<strong>システムを設計するための判断力である。</strong>これは、1 からのシステム構築運用経験が一番効果が高い</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://jfrog.com/shownote/developers-summit-2020/\">[13-B-5] Best Practices In Implementing Container Image Promotion Pipelines -知っておくべきコンテナイメージ・プロモーションの方法</a></h2>\n<h2>技術の好き嫌い</h2>\n<ul>\n<li>技術を知れば知るほどその技術が好きでなくなっていってしまう。。。</li>\n</ul>\n<h3>デプロイについて</h3>\n<ul>\n<li>本当にデファクト通りにやる必要があるのか？</li>\n<li>今までのやり方と Docker は違う</li>\n</ul>\n<h4>Docker はどう違うのか</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">$ docker build</code>の存在 → 全部を Docker でやってしまいがち</p>\n<ul>\n<li>Docker は簡単だが楽すると面倒なことになる</li>\n</ul>\n</li>\n<li>ワンライナー docker で例えばバージョン指定しないと、勝手に最新バージョンになってしまう。それでは build ごとに docker イメージが同じであると保証できない</li>\n</ul>\n<h4>ではどうする</h4>\n<ul>\n<li>ただバージョンを固定するだけでも不十分である。なぜならパッチが当たったらまた違うイメージになってしまう。</li>\n<li>\n<p>バージョンのハッシュで指定したら？これでは過毒性がおちる。</p>\n<ul>\n<li>これは、Python、Node.js などでも同じで、バージョン管理から逃げることはできない（ディペンデンシを考える）</li>\n</ul>\n</li>\n<li><strong>安定したバイナリで管理すること</strong>→ 一度ビルドしたイメージを各パイプラインフェーズで使う</li>\n</ul>\n<h4>鉄板のパイプラインを作る</h4>\n<p>開発環境と本番環境を区別するには</p>\n<ul>\n<li>案 1：LABEL をつける →typo とか怖い</li>\n<li>案 2：dockerhub のリポジトリを分ける → プロジェクトごとの構成であり、環境ごとに分けることはできない</li>\n<li>案 3：環境ごとにレジストリを分ける</li>\n</ul>\n<h4>大事なこと</h4>\n<ul>\n<li>環境ごとにレジストリを分ける</li>\n<li>全てのイメージにアクセスしやすくする</li>\n<li>Promotion は素早く行う</li>\n<li>常に最新のものを使用する</li>\n</ul>\n<h4>どう実装するか</h4>\n<p>Docker Tag の構造</p>\n<ul>\n<li>\n<p>同一ホストに別のレジストリをもつとパニックになる</p>\n<ul>\n<li>Vertiual hosts を使う</li>\n</ul>\n</li>\n</ul>\n<p>レジストリ間の Promotion をどうする</p>\n<ul>\n<li>jfrog のツールで対応する → 開発者からは各環境も同一のレジストリのように扱える</li>\n</ul>\n<p>では最新のバージョンを使いつづけたい場合は？</p>\n<ul>\n<li>jfrog ではメタデータとして管理できる</li>\n</ul>\n<h4>JFrog を使うと</h4>\n<ul>\n<li>最新をシンプルに使える</li>\n<li>依存関係を自分で管理することができる</li>\n<li>自分でベースイメージ、インフラ、アプリケーションファイルを管理する → これをツールなど使って</li>\n</ul>\n<h3>まとめ</h3>\n<ul>\n<li>build は一回だけ</li>\n<li>環境は分ける</li>\n<li>ビルドしたものをプロモートする</li>\n<li>自分の依存関係は自分で管理する</li>\n</ul>\n<h2><a href=\"https://speakerdeck.com/nihonbuson/developers-summit-2020\">[13-D-6]テストエンジニアが教える　テストコードを書き始める前に考えるべきテスト</a></h2>\n<h3>テストの目的</h3>\n<p>テストの 7 原則 ①：テストは欠陥がある、ことしか示せない（悪魔の証明的な）</p>\n<ul>\n<li>欠陥の検出</li>\n<li>品質保証</li>\n<li>意思決定のため</li>\n<li><strong>欠陥の作り込みの防止</strong> ← 「実装が終わったからテスト」ではない</li>\n</ul>\n<h3>欠陥のつくりこみ防止とは？</h3>\n<ul>\n<li>\n<p>設計の段階で気になる項目を上げていくことを口頭テストとも言える</p>\n<ul>\n<li>要は、ぼぼ要件定義</li>\n</ul>\n</li>\n<li>テスト内容はいろんな人と話をしたほうがいい</li>\n</ul>\n<h3>テストケースはどう作る？</h3>\n<p>テストの 7 原則 ②：全テストケースを行うことは不可能である。</p>\n<ul>\n<li>\n<p>テスト項目笑点的思考法</p>\n<ul>\n<li>「〜のテストをやるべきです（やるべきではないです。）」</li>\n<li>「ほう、それはどうしてだい？」</li>\n<li>「〜だからです」</li>\n</ul>\n</li>\n</ul>\n<h3>Checking と Testing</h3>\n<p>Checking</p>\n<ul>\n<li>意図通り動くかどうか</li>\n</ul>\n<p>Testing</p>\n<ul>\n<li>どうにかして製品を破壊する作業</li>\n</ul>\n<h3>QA チームがやりたいこと</h3>\n<ul>\n<li>Testing</li>\n<li>テストプロとしてのアドバイス</li>\n<li>\n<p>話を聞く、質問（意図を聞く）</p>\n<ul>\n<li>よく使える質問</li>\n<li>「これないがしたいんだっけ」→How から What へ</li>\n<li>「ごめん、ちゃんと理解できてないからこの部分もう一度説明してもらっていい？」→ 開発者が自分で気付けなかったことに気づくことができる。</li>\n</ul>\n</li>\n</ul>\n<h3>大事なこと</h3>\n<ul>\n<li>テスト作業ではなく、<strong>テスト活動をする</strong>！</li>\n</ul>\n<h2>[13-C-7]InterSystems IRIS Data Platform で高度なデータ分析のための基盤を整備しよう</h2>\n<h3>データ永続化の歴史</h3>\n<ul>\n<li>ガバナンスや、コンプライアンスからデータレイクの考え方が生まれた。</li>\n<li>データレイクは技術要素というよりベストプラクティス</li>\n</ul>\n<h3>階層型 DB の勧め</h3>\n<ul>\n<li>IRIS Data Platform はいいぞ！</li>\n<li>スケーラブルなプラットフォームを提供している。</li>\n</ul>\n<h3>データ分析を行うためには</h3>\n<ul>\n<li>トレーサビリティの高いツールを使う。</li>\n<li>バグデータが混入した際にその混入原因まで調査する。</li>\n</ul>\n<h2>[13-D-7]エンジニアはものづくりの夢を見るか - AWS Loft Tokyo 入館アプリの開発事例 -</h2>\n<p>※途中から参加</p>\n<h3>ポイント</h3>\n<ul>\n<li>開発したいモチベーションをどこに置くか、が大事</li>\n<li><strong>締め切り駆動開発！！</strong></li>\n</ul>\n<h3>使用技術</h3>\n<ul>\n<li>AWS Amplify</li>\n<li>\n<p>AWS Amplify Framework</p>\n<ul>\n<li>Amplify for ~ :AWS バックエンドと簡単に統合できるクライアントライブラリ</li>\n<li>UI Component:主要フレームワークに対応して、よくある UI をよしなに作ってくれる</li>\n</ul>\n</li>\n<li>AWS Chalice：Python でサーバレスアプリを迅速に作るための OSS フレームワーク</li>\n</ul>\n<h3>これからのお話(運用と改善)</h3>\n<ul>\n<li>空席情報わかるようにしたい</li>\n<li>本人確認書類提出をやめたい</li>\n</ul>\n<h2><a href=\"https://speakerdeck.com/yattom/mob-programming-to-build-teams\">[13-E-8]チームをつくるモブプログラミング ～内側と外側から語る～</a></h2>\n<h3>モブプロを始める</h3>\n<p>始めるときは。。。</p>\n<ul>\n<li>モビングを実験とする</li>\n<li>行番号 ON</li>\n<li>起こらない etc...</li>\n</ul>\n<h4>経験から得られたコツ</h4>\n<ul>\n<li>目的とゴールを定める・・・長期的なゴールと、局所的なセッションのゴールを決める。このとき、「目的はこれ。いいですか？」をリーダーが主導してはいけない。</li>\n<li>進み方を共有する・・・ToDo リスト作成、作業の区切りを確認しながら進む。 <strong>ドライバーが常にぶつぶつする</strong></li>\n<li>その場でフィードバックを得る・・・<strong>後で一人でテストしたり、リファクタしたりはだめ</strong></li>\n<li>振り返りをする・・・ただ、一人復習の方が集中できる場合もあるので、自由</li>\n</ul>\n<blockquote>\n<p>Q. モブプロ始めるとき周りをどう説得するか</p>\n<p>A. 試験的にやってみる。外部の人や、経験者のお墨付きを得る。</p>\n<p>Q. 「一人で作業したい」と言われたら。</p>\n<p>A. とりあえずやってみてもらう！！別に全員でやる必要もない。</p>\n</blockquote>\n<h3>チームをブーストするモブプロ</h3>\n<h5>目的</h5>\n<ul>\n<li>教育的強化</li>\n<li>チームの生産性強化</li>\n</ul>\n<h5>スキルトランスファー</h5>\n<ul>\n<li>経験値が低い人をドライバにする・・・経験のある人がガリガリ進めると、周りが気後れしまう。</li>\n<li>仕事を止めることができる権利を渡す・・・知識のジャストインタイム</li>\n<li>聴きながら手を動かして学ぶ</li>\n<li>参加者全員で共有できる</li>\n</ul>\n<p>ここで、暗黙知（コードの組み立て方、ツールの便利機能、What/Why/How）も共有すること</p>\n<h5>レビュー</h5>\n<p>レビューおじさん問題（スキルアップして、開発したいのにレビュアーになっちゃう）を救う。\nレビューの目的は、<strong>検査、学習、強化</strong>。モブプロは<strong>検査、学習</strong>をカバーする。</p>\n<ul>\n<li>リアルタイムレビュー</li>\n<li>タイポは親の仇のように指摘してくれる</li>\n<li>チーム全員の合意をもとにコードかける</li>\n<li>忖度せずにチーム全員でベストなコードを目指すことができる</li>\n</ul>\n<p>レビューと組み合わせて 3 要素全て補填していく。</p>\n<p>Re-View（再び観る）の意味を考える。普通だと、レビュアーは First-View。開発時の目線と冷静な目線両方持つことができる。</p>\n<blockquote>\n<p>Q. 喧嘩にならない？</p>\n<p>A. 建設的な議論であれば OK。絶対に強い言葉を使わないことが大事。無意味</p>\n<p>Q. 「わからないです」って言えない人出てきちゃうのでは？</p>\n<p>A. ドライバを任せる、期間区切って振り返りの時間をこまめに取る。</p>\n</blockquote>\n<h3>仕事をドライブするモブプロ</h3>\n<h4>モブプロの真価とは</h4>\n<ul>\n<li>全員の知識を生かせる</li>\n<li>個々の総和以上の成果</li>\n<li>エンゲージメントを引き出す</li>\n<li>オーバーヘッドが最小になる。</li>\n</ul>\n<h4>モブプロが活きない場面</h4>\n<ul>\n<li>みんな知っていること</li>\n<li>簡単な問題の積み重ね</li>\n<li>単純作業、ルーチンワーク</li>\n</ul>\n<h4>モブプロの目的にあった方式を使う</h4>\n<ul>\n<li>仕事のドライブ or チームをブースト</li>\n</ul>\n<p>回数重ねてうまく回り始めると、両方ハイパフォーマンスを実現する方向へ収束していく</p>\n<p><strong>あとは結局、心理的安全が大事</strong>。心理的安全が担保されていると、ほどよい学習状態（プレッシャーと能力のバランスが取れている状態）を作り出すことができる</p>\n<blockquote>\n<p>Q. 仕事を分担してやると、生産性が落ちちゃうんじゃない？</p>\n<p>A. 短期的生産性 UP、単純作業、ルーチンワークが目的の場合はそう。あとは人数が多すぎてもあまり意味がない。中長期的に見て生産性を上げる戦術として使うもの</p>\n<p>Q. ほどよい学習状態に身を置くための工夫とは？</p>\n<p>A. 新しい技術をモブプロ題材にするなど</p>\n<p>Q. モブプロがうまく行っているチームとは</p>\n<p>A. 全員が均等に発言している。楽しそうにしている。偉い人がそのチームをほっといてくれている状態。</p>\n</blockquote>\n<h2>モブプロの全体性</h2>\n<ul>\n<li>チームを、内側の向上 → 外側の向上 →...と拡張させていくと、最終、会社の話になってくる。</li>\n<li>インテグラル理論、タックマン理論</li>\n<li>決して <strong>モブプロをやらないといけないわけではない</strong> 。→「一緒に行動すること」ではなく「一緒に考えること」が重要</li>\n</ul>","frontmatter":{"title":"Developer Summit 2020 1日目行ってきた","date":"14 February, 2020","tags":["others","devサミ"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Developer_Summit_2020/"}}}