{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/AtCoderBeginnersSelection3/","webpackCompilationHash":"f7b29de21a6d865745d6","result":{"data":{"site":{"siteMetadata":{"title":"Takumi Ogawa - @ogady","user":{"name":"Takumi Ogawa","github":"ogady","qiita":"ogady","twitter":"_ogady_","facebook":"takumi.ogawa.37266","linkedin":"takumi-ogawa-869046195"}}},"markdownRemark":{"html":"<h3>8. <a href=\"hhttps://atcoder.jp/contests/abs/tasks/abc085_c\">Otoshidama</a></h3>\n<p>【概要】</p>\n<p>10000 円札、5000 円札、1000 円札を合計 N 枚使用して、Y 円になる組み合わせを 1 つ出力する。</p>\n<p>N 枚のお札の合計金額が Y 円となることがありえない場合は、<code class=\"language-text\">-1 -1 -1</code> と出力する。</p>\n<p>for 文をネストして全探索するが、素直に 3 重ループで回すと、TLE（Time Limit Exceeded）となってしまいそう。</p>\n<p>2 重ループで 2 種類のお札の枚数を確定させ、3 種類目のお札の枚数（<code class=\"language-text\">N - 1種類目の枚数 - 2種類目の枚数」</code>）で 残りの金額が実現できるかを調査すれば、for 文のネストをいつ解消することができる。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> cnt<span class=\"token punctuation\">,</span> tar <span class=\"token builtin\">int</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tar<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> cnt<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> cnt<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tsum <span class=\"token operator\">:=</span> <span class=\"token number\">10000</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">5000</span><span class=\"token operator\">*</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> sum <span class=\"token operator\">==</span> tar <span class=\"token punctuation\">{</span>\n\t\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>9. <a href=\"https://atcoder.jp/contests/abs/tasks/arc065_a\">白昼夢</a></h3>\n<p>【概要】</p>\n<p>文字列 S が<code class=\"language-text\">dream</code>、<code class=\"language-text\">dreamer</code>、<code class=\"language-text\">erase</code>、<code class=\"language-text\">eraser</code>の組み合わせでできているかを判例する。</p>\n<p>S を後ろから判定していくと簡単に求められる。</p>\n<p>Greedy アルゴリズム（貪欲法）と言うらしい。</p>\n<blockquote>\n<p>貪欲法とは。。。</p>\n<ol>\n<li>問題を複数の部分問題に分割する</li>\n<li>各部分問題に対する解を評価する(各部分問題ごとに考えられる解のパターンは複数ある．)</li>\n<li>評価が最も良いものをその部分問題の解(=局所最適解)として，次の部分問題の解(これも複数通り考えられる)を評価する</li>\n</ol>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\tkeyWords <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"dream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dreamer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"erase\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eraser\"</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> status <span class=\"token builtin\">bool</span>\n\t\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>　\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> keyWords <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\ts <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSuffix</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t\t\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>status <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">break</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>10. <a href=\"https://atcoder.jp/contests/abs/tasks/arc089_a\">Traveling</a></h3>\n<p>【概要】</p>\n<p>二次元平面上を時刻 0 に点 (0,0)からスタートし、時刻 ti ごとにに 点 (xi,yi) に移動しながら動く。これが実現可能かを判定する。</p>\n<p>時刻 t+1 には、(x+1,y) , (x−1,y), (x,y+1), (x,y−1)に移動し、留まることはできない。</p>\n<p>これは最初全然解き方がわからなかった。</p>\n<p><a href=\"https://www.weblio.jp/content/%E3%83%91%E3%83%AA%E3%83%86%E3%82%A3\">パリティ</a>（今回の定義では偶奇性）の考え方を使用するらしい。</p>\n<p>毎ステップごとに<code class=\"language-text\">xi+yi</code>の偶奇が入れ替わる特性を利用して解いていく。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"math\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> plan <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tt <span class=\"token builtin\">float64</span>\n\tx <span class=\"token builtin\">float64</span>\n\ty <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span>\n\n\tplans <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>plan<span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tplans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> plan<span class=\"token punctuation\">{</span>\n\t\tt<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tx<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\ty<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> t<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f %f %f\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span>\n\t\tplans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> plan<span class=\"token punctuation\">{</span>\n\t\t\tt<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">,</span>\n\t\t\tx<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n\t\t\ty<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> canMove <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\n\t\tdist <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>plans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">-</span>plans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>plans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">-</span>plans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n\t\tdt <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>plans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t <span class=\"token operator\">-</span> plans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> dist <span class=\"token operator\">&lt;=</span> dt <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">judgeEven</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">judgeEven</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcanMove <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tcanMove <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> canMove <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">judgeEven</span><span class=\"token punctuation\">(</span>tar <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>tar<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"AtCoder Beginers Selectionをgoで解いてみる(後編)","date":"17 May, 2020","tags":["AtCoder","Go"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/AtCoderBeginnersSelection3/"}}}