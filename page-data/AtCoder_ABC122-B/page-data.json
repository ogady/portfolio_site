{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/AtCoder_ABC122-B/","webpackCompilationHash":"b31ab5cef85b607ff3b3","result":{"data":{"site":{"siteMetadata":{"title":"Takumi Ogawa - @ogady","user":{"name":"Takumi Ogawa","github":"ogady","qiita":"ogady","twitter":"_ogady_","facebook":"takumi.ogawa.37266","linkedin":"takumi-ogawa-869046195"}}},"markdownRemark":{"html":"<h3><a href=\"https://atcoder.jp/contests/abc122/tasks/abc122_b\">B-ATCoder</a></h3>\n<p>【概要】\n英大文字からなる文字列<strong>S</strong>が与えられる。\nS のなかで A、C、G、T（ACGT 文字列） で構成される最も長い部分文字列の長さを求める。</p>\n<p>全探索で求める。</p>\n<p>先頭の文字から探索し ACGT 文字列に合致した場合フラグを true にする。</p>\n<p>ACGT 文字列に合致しない文字が現れた場合フラグを false にする。</p>\n<p>今回は、4 文字との合致判定なので、if 文で or 条件を 4 つ並べたが、合致すべき文字数が多い場合は内部で対象の文字列を for 文で回した方が簡単にかけるはず。</p>\n<p>また、go 言語で string 文字列を range で回す場合は、rune 型で取得する点に注意。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">var</span> flg <span class=\"token builtin\">bool</span>\n\t<span class=\"token keyword\">var</span> cnt <span class=\"token builtin\">int</span>\n\tstr <span class=\"token operator\">:=</span> <span class=\"token function\">StrStdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> result <span class=\"token builtin\">int</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> str <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"A\"</span> <span class=\"token operator\">||</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"C\"</span> <span class=\"token operator\">||</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"G\"</span> <span class=\"token operator\">||</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"T\"</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>flg <span class=\"token punctuation\">{</span>\n\t\t\t\tflg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n            cnt<span class=\"token operator\">++</span>\n\n            <span class=\"token comment\">// カウントが過去最大だったらresultを上書きする。</span>\n\t\t\t<span class=\"token keyword\">if</span> result <span class=\"token operator\">&lt;=</span> cnt <span class=\"token punctuation\">{</span>\n\t\t\t\tresult <span class=\"token operator\">=</span> cnt\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tflg <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\tcnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">StrStdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\tscanner <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">)</span>\n\tscanner<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"AtCoder(go) ABC122-B ","date":"30 May, 2020","tags":["AtCoder","Go"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/AtCoder_ABC122-B/"}}}